#include <EEPROM.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
//#include <Adafruit_INA219.h>
#include <Servo.h>
 
// Connect to the WiFi
const char* ssid = "";
const char* password = "";
const char* mqtt_server = "192.168.42.98";
const char* topic_state = "home-assistant/cover/bedroom_blinds/state";
const char* state_open = "1";
const char* state_closed = "0";
 
WiFiClient espClient;
PubSubClient client(espClient);

Servo servo;
 
void callback(char* topic, byte* payload, unsigned int length) {
 Serial.print("Message arrived [");
 Serial.print(topic);
 Serial.print("] ");
 for (int i=0;i<length;i++) {
  char receivedChar = (char)payload[i];
  Serial.print(receivedChar);
  
  if (receivedChar == '0'){
    servo.write(172);
    client.publish(topic_state,state_closed);}
  if (receivedChar == '1'){
    servo.write(0);
    client.publish(topic_state,state_open);}
  }
  Serial.println();
}


 
void reconnect() {
 // Loop until we're reconnected
 while (!client.connected()) {
 Serial.print("Attempting MQTT connection...");
 // Attempt to connect
 if (client.connect("ESP8266 Client")) {
  Serial.println("connected");
  // ... and subscribe to topic
  client.subscribe("home-assistant/cover/bedroom_blinds");
 } else {
  Serial.print("failed, rc=");
  Serial.print(client.state());
  Serial.println(" try again in 2 seconds");
  // Wait 2 seconds before retrying
  delay(2000);
  }
 }
}

void setup() {
  //Connect to Serial Port
  Serial.begin(115200);
  //Wait until we are connected to Serial Port
  while(! Serial);
  //Attach Servo to Channel Pin and set to Zero position
  servo.attach(2);
  //servo.write(90);

  Serial.println();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

}
 
void loop()
{
 if (!client.connected()) {
  reconnect();
 }
 client.loop();
 
 //Constantly poll for state and publish
// if(servo.read() == '90'); { client.publish(topic_state,state_open);} //is this too expensive to do?
// if(servo.read() != '90') { client.publish(topic_state,state_closed);}
}

